import random  # just the random function used if some one want the words to be random
'''
Created by Shafay Amjad
Delivered to : transactions232 user on fiverr
Comments in the file are added for the increased visibility for the user to edit the specific code.
Contact shafaypro for editing and stuff
'''

def read_from_file():  # This function reads all the 3 lack 55 thousand word from a file , which has all the valid words init.
	read_file = open('words.txt', 'r')
	data = read_file.readlines()
	read_file.close()
	return data


def list_generator(data):  # randomly text generator which generates list of the words by stripping white space from them.
	wordlist = list()
	for i in data:
		i = str(i).strip()
		wordlist.append(i)
	print('Wordlist generated!')
	return wordlist


def RandomSelector(size, wordlist):  # random selector randomly select word from the specific file and adds into a list
	counter = 0
	randomdatalist = list()
	random_indexes = list()
	while counter < int(size):
		randomlist_index = random.randint(0, len(wordlist))
		random_indexes.append(randomlist_index)
		counter += 1
	return random_indexes


def wordcheck(wordinput):  # this is just a function created for the checking of the word from the word file rather the word is valid or not
	if str(wordinput) in wordlist:
		print('A valid word ! :) ')
	else:
		print('The word is invalid ! :) ')


def randomwordreturn(randomnumbers):
	resultset = list()  # result set list for the random words
	counter = 0  # this is just a counter for dubuging purposes
	for i in randomnumbers:
		resultset.append(wordlist[int(i)])
	return resultset


def output_string_starting_word(start_word, wordlist):
	start_word = str(start_word).lower()
	start_word = start_word.strip()  # this strips the extra white spaces
	result_list = list()  # this will store the result generated by this function in order to return the funtion
	for _ in wordlist:  # to loop throug each wordlist to check if the words start with the wordlist or not
		if str(_).startswith(start_word):
			result_list.append(_)
		else:
			continue
	if result_list is None:
		return None
	return result_list  # this returns the result list founded in the process !


def output_containing_word(existing_word_input, wordlist, rangeSize=0):
	existing_word_input = existing_word_input.strip()
	existing_word_input = existing_word_input.lower()
	result_list = list()
	for _ in wordlist:
		if str(_).__contains__(existing_word_input):  # if the word exits in the specific words
			result_list.append(_)  # add the word in to a list of specific fields.
		else:
			continue
	if result_list is None:
		return None
	return result_list


# print("")
def retrieve_lengthend_words(length_of_word, wordlist): # this is thre
	result_list = list()
	for _ in wordlist:
		if len(_) == length_of_word and not(str(_).__contains__(',')) and not(str(_).__contains__("'")) and not(str(_).__contains__("&")):
			result_list.append(_)
		else:
			continue
	if result_list is None:
		return None
	return result_list


def displayresult(result_list):  # this function is to display the result
	for _ in result_list:  # iteration in the list
		print(_)  # printing the specificv element in the list


def syllablewordfile():
	f = open('one syllable words.txt', 'r')
	data = f.readlines()
	data_list = list()
	for d in data:
		data_list.append(d.strip())
	return data_list
def match_syllableword(syllable_number,data_list):
	result_list = list()
	for _ in data_list:
		_=_.strip()
		if len(str(_)) == syllable_number:
			result_list.append(_)  # addst the certian element to the list
		else:
			continue
	return result_list

def main():
	data = read_from_file()
	global wordlist
	wordlist = list_generator(data)
	inputcheck = input('Do you want to Continue execution of the program ? Y/y or N/n')
	if inputcheck in ['Y', 'y']:  # this is the condition to check what you want to do
		input_condition = input("What you want ? Type\n 'a')Output starting with a word specified by you \n 'b') User will choose amount of letters(size) to display result \n 'c') to check syllabes \n 'd') User will Input Number to get Random Words \n 'e') output word having a certain input by the user \n 'f') Check a word for validation")
		if input_condition in ['d', 'D']:
			sizewords = int(input('How many words ?'))  # size of words are being specified
			randomnumbers = RandomSelector(sizewords, wordlist)  # random numbers are specified
			randomword_generated = randomwordreturn(randomnumbers)  # randomword generator
			print('Random words are : :)')
			for i in randomword_generated:
				print(i)
		elif input_condition in ['a', 'A']:  # this condition will run when the a condition satisfied
			print("output string starting with a word")
			start_input_word = input("Enter the specific word you want to start from and check!")
			result_set = output_string_starting_word(start_input_word, wordlist) # calls the function to get the starting words list matched with the user input
			if result_set is None:
				print("No Result Found, it must be invalid")
				exit()  # exiting the program in case the result_set is empty
			displayresult(result_set)  # display result function is called

		elif input_condition in ['b', 'B']:
			print("User to choose amount of letters ")
			size_input_word = input("Enter the size of words you want to retrieve")
			try:
				size_input_word = int(size_input_word)
				result_set = retrieve_lengthend_words(size_input_word, wordlist)
				if result_set is None:
					print("No Result Found, it must be invalid")
					exit()  # exiting the program in case the result_set is empty
				displayresult(result_set)  # display result function is called
			except:
				print("There is an exception occured here !!")
				print('Most probably the error is ::  didnt gave length of word in integer !!')

		elif input_condition in ['c', 'C']:
			print("Syllabes Work here ")
			try:
				syllable_number = int (input("Enter the length for the words you want which are to be valid syllables"))
				# The work is in progress here !!!!!!! , logical equation is being worked on it
				data_list = syllablewordfile() # the data_list variable has all the data from the one syllable file
				list_returned = match_syllableword(syllable_number,data_list)

				for word in list_returned:
					print(word)

			except:
				print("Invalid input, not accepting ,--> expected integer, Exiting !!!!!")
				exit()  # exits the program

		elif input_condition in ['e', 'E']:
			existing_input_word = input("Enter the specific word you want to start from and check!")
			# result_set = output_string_starting_word(start_input_word, wordlist)
			result_set = output_containing_word(existing_input_word,
										 wordlist)  # this is the function called to check the program having the specific
			if result_set is None:
				print("No Result Found, it must be invalid")
				exit()  # exiting the program in case the result_set is empty
			displayresult(result_set)  # display result function is called
		elif input_condition in ['F', 'f']:
			word_input_user = input("Enter the word you want to check ,if it is valid or not \n")
			word_input_user = word_input_user.strip()  # this stripes the unnecessary spaces from the word input :)
			wordcheck(word_input_user)

		else:
			print("Invalid Choice my the user , Exiting....")
			exit()

	elif inputcheck in ['N', 'n']:
		print('Exiting the program!')
		exit()  # exit the program

	else:
		print('Invalid input !!! :/')


if __name__ == '__main__':
	main()
